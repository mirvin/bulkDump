# bulkDump
for yaml dumps

Create a Single Story
{
  "Scope": "System (All Projects)",
  "AssetType": "Story",
  "Name": "Story"
}

create Multiple stories


- Scope: System (All Projects)
  AssetType: Story
  Name: Story A
- Scope: System (All Projects)
  AssetType: Story
  Name: Story B
  
  
  #Create multiple types of assets
  [{
  "Scope": "System (All Projects)",
  "AssetType": "Story",
  "Name": "Story A"
},
{
  "Scope": "System (All Projects)",
  "AssetType": "Defect",
  "Name": "Defect A"
}
]


#Create multiple Stories and attach Tests and Tasks to each
Scope: System (All Projects)
  AssetType: Story
  Name: Story-1
  Children:
  - AssetType: Test
    Name: Test-1 in Story-1
  - AssetType: Task
    Name: Task-1 in Story-1
  - AssetType: Test
    Name: Test-2 in Story-1
  - AssetType: Task
    Name: Task-2 in Story-1
- Scope: System (All Projects)
  AssetType: Story
  Name: Story-2
  Children:
  - AssetType: Test
    Name: Test-1 in Story-2
  - AssetType: Task
    Name: Task-1 in Story-2
  - AssetType: Test
    Name: Test-2 in Story-2
  - AssetType: Task
    Name: Task-2 in Story-2
- Scope: System (All Projects)
  AssetType: Story
  Name: Story-3
  Children:
  - AssetType: Test
    Name: Test-1 in Story-3
  - AssetType: Task
    Name: Task-1 in Story-3
  - AssetType: Test
    Name: Test-2 in Story-3
  - AssetType: Task
    Name: Task-2 in Story-3


#Create Story and attach to existing Epic
- from: Epic:4622
  update:
    Subs:
      add:
      - AssetType: Story
        Name: Story-1

#Create a new Story and use an existing Story then attach both to an Epic
---
- from: Epic:4622
  update:
    Subs:
      add:
      - AssetType: Story
        Name: Story-1
      - Story:1234


#Associate a Story to an Epic using a Subquery 
from: Epic:4622
  update:
    Subs:
      add:
        from: Story
        filter:
        - ID='Story:1227'


UPDATEING

#Update Single Assets

from: Epic:4622
update:
  Description: I am the coolest Epic man!


#update multiple assets


from: Epic
where:
  Scope.Name: Test Dump
update:
  Description: Queen of Epics!


#Find and Replace
from: Epic
where:
  Scope.Name: Test Dump
update:
  Description: Queen of Epics!


#Find and Replace (alt)

from: Epic
where:
  ID: Epic:1161
update:
  Subs:
    Story:1781: remove
    add:
    - AssetType: Story
      Name: Brand new story with attributes that I care about
      
      
      
      
 ASSET OPS
 
 #Apply Single Operation to All Stories within a Scope
 
 from: Story
where:
  Story: Story:1234
execute: Delete

#Apply Multiple Operations to All Stories within a Scope

from: Story
where:
  Scope: Scope:5655
execute: QuickClose


Advanced Bulk operation


#filters
#deferred Execution (Preview Only)

In some cases users may need to get a list of assets that will effected by a bulk operation.  The bulk API allows for you to write the query and instead of executing the bulk operation, it creates the a graph of the executions.  The bulk engine reduces graph of the execution into single ordered list.  This list contains all of the operations and assets that will be affected by bulk operation.

Posting to http://myV1Host/instance/api/Asset?previewOnly=true will get you a the full execution path
For example, here is the output to this payload

from: Story
filter: 
  Name='Happy'
execute: QuickClose


[
  {
    "@62d57651-a1d7-462a-bab4-69f292f5c791": {
      "oid": "Story:5715",
      "execute": "QuickClose"
    }
  },
  {
    "@debd1133-1c9b-4919-a260-a14f71028a66": {
      "oid": "Story:5717",
      "execute": "QuickClose"
    }
  },
  {
    "@088b99ef-ab5f-47a8-9dea-0b27c5c49965": {
      "oid": "Story:5718",
      "execute": "QuickClose"
    }
  }
]

This operation QuickCloses every story in the system with the name "Happy".  Notice the guid associated with each one of the Stories. The are independant which implies that they can be created in any order since there are no dependencies.  Here is an example the has dependencies between each of the reference objects.  This is similar to the concept aliasing found in this document.



#aliasing
Aliasing will allow you to assign the output of a bulk operation to a reference.  One of the advantages of this feature is that it will allow users to make a reference to previously created assets in a later part of the payload.  For example,

I want to create a brand new scope and use this scope but reference it later on in the payload.
[{
            "@myNewScope": {
                "AssetType": "Scope",
                "Parent": "Scope:0",
                "Name": "test_org",
                "BeginDate": "1/1/2017"
            },
            "@DudeStory": {
                "AssetType": "Story",
                "Name": "test_org",
                "Scope" : "@myNewScope"
            },
}]



Here is a more elaborate sample of how to use this aliasing

[{
            "@scope": {
                "AssetType": "Scope",
                "Parent": "Scope:0",
                "Name": "test_org",
                "BeginDate": "1/1/2017"
            },
            "@team": {
                "AssetType": "Team",
                "Name": "test_org",
            },
            "@teamRoom": {
                "AssetType": "TeamRoom",
                "Name": "test_org",
                "IsKanban": true,
                "Team": "@team",
                "Scope": "@scope"
            },
            "@owner": {
                "AssetType": "Member",
                "Name": "John Doe",
                "Nickname": "John",
                "IsCollaborator": false,
                "NotifyViaEmail": false,
                "Password": "john",
                "Username": "john@example.com",
                "Email": "john@example.com",
                "DefaultRole": "Role:2",
                "Scopes": [
                    "@scope"
                ]
            },
            "@notstarted": {
                "AssetType": "StoryStatus",
                "Name": "Not Started",
                "RollupState": "0",
                "Team": "@team"
            },
            "@inprogress": {
                "AssetType": "StoryStatus",
                "Name": "In Progress",
                "RollupState": "64",
                "Team": "@team"
            },
            "@done": {
                "AssetType": "StoryStatus",
                "Name": "Done",
                "RollupState": "64",
                "Team": "@team"
            },
            "@readytodeploy": {
                "AssetType": "StoryStatus",
                "Name": "Read To Deploy",
                "RollupState": "128",
                "Team": "@team"
            }
        }]

[{
            "@scope": {
                "AssetType": "Scope",
                "Parent": "Scope:0",
                "Name": "test_org",
                "BeginDate": "1/1/2017"
            },
            "@team": {
                "AssetType": "Team",
                "Name": "test_org",
            },
            "@teamRoom": {
                "AssetType": "TeamRoom",
                "Name": "test_org",
                "IsKanban": true,
                "Team": "@team",
                "Scope": "@scope"
            },
            "@owner": {
                "AssetType": "Member",
                "Name": "John Doe",
                "Nickname": "John",
                "IsCollaborator": false,
                "NotifyViaEmail": false,
                "Password": "john",
                "Username": "john@example.com",
                "Email": "john@example.com",
                "DefaultRole": "Role:2",
                "Scopes": [
                    "@scope"
                ]
            },
            "@notstarted": {
                "AssetType": "StoryStatus",
                "Name": "Not Started",
                "RollupState": "0",
                "Team": "@team"
            },
            "@inprogress": {
                "AssetType": "StoryStatus",
                "Name": "In Progress",
                "RollupState": "64",
                "Team": "@team"
            },
            "@done": {
                "AssetType": "StoryStatus",
                "Name": "Done",
                "RollupState": "64",
                "Team": "@team"
            },
            "@readytodeploy": {
                "AssetType": "StoryStatus",
                "Name": "Read To Deploy",
                "RollupState": "128",
                "Team": "@team"
            }
        }]

  
  #integration with programming environments
